<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Compose 使用入门</title>
      <link href="/2023/02/01/gradle/Compose%20%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
      <url>/2023/02/01/gradle/Compose%20%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>Compose 是一种全新构建 Android 原生界面的组件，抛弃了传统的 xml 声明方式，直接在 kt 文件中声明调用构建界面。</p><h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><p>在模块 build.gradle 文件中添加</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">android <span class="token punctuation">&#123;</span>    buildFeatures <span class="token punctuation">&#123;</span>        compose <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    composeOptions <span class="token punctuation">&#123;</span>        kotlinCompilerExtensionVersion <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"1.3.2"</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码块 composeOptions 中定义的 Kotlin 编译器扩展版本需要与使用的 Kotlin 版本对应，对应关系表查看<a href="https://developer.android.google.cn/jetpack/androidx/releases/compose-kotlin">兼容性对应图</a></p><p>之后添加以下依赖</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>    <span class="token comment">// 必选项</span>    <span class="token comment">// Compose 编程模型和状态管理的基本构建块，以及 Compose Compiler 插件针对的核心运行时。</span>    implementation <span class="token interpolation-string"><span class="token string">"androidx.compose.runtime:runtime"</span></span>    <span class="token comment">// 借助 Kotlin 编译器插件，转换 @Composable functions（可组合函数）并启用优化功能。</span>    implementation <span class="token interpolation-string"><span class="token string">"androidx.compose.compiler:compiler"</span></span>    <span class="token comment">// 与设备互动所需的 Compose UI 的基本组件，包括布局、绘图和输入。</span>    implementation <span class="token interpolation-string"><span class="token string">"androidx.compose.ui:ui"</span></span>    <span class="token comment">// 使用 Material Design 组件构建 Jetpack Compose 界面。</span>    implementation <span class="token interpolation-string"><span class="token string">"androidx.compose.material:material"</span></span>    <span class="token comment">// 使用现成可用的构建块编写 Jetpack Compose 应用，还可扩展 Foundation 以构建您自己的设计系统元素。</span>    implementation <span class="token interpolation-string"><span class="token string">"androidx.compose.foundation:foundation"</span></span>    <span class="token comment">// 可选项</span>    <span class="token comment">// Android Studio 预览支持</span>    implementation <span class="token interpolation-string"><span class="token string">"androidx.compose.ui:ui-tooling-preview"</span></span>    implementation <span class="token interpolation-string"><span class="token string">"androidx.compose.ui:ui-tooling"</span></span>    <span class="token comment">// compose Activity</span>    implementation <span class="token interpolation-string"><span class="token string">"androidx.activity:activity-compose"</span></span>    <span class="token comment">// compose ViewModels</span>    implementation <span class="token interpolation-string"><span class="token string">"androidx.lifecycle:lifecycle-viewmodel-compose"</span></span>    <span class="token comment">// compose LiveData</span>    implementation <span class="token interpolation-string"><span class="token string">"androidx.compose.runtime:runtime-livedata"</span></span>    <span class="token comment">// compose constraintlayout</span>    implementation <span class="token interpolation-string"><span class="token string">"androidx.constraintlayout:constraintlayout-compose"</span></span>    <span class="token comment">// compose Navigation</span>    implementation <span class="token interpolation-string"><span class="token string">"androidx.navigation:navigation-compose"</span></span>    <span class="token comment">// compose glide</span>    implementation <span class="token interpolation-string"><span class="token string">"com.github.bumptech.glide:compose"</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可通过引入 BoM 库进行依赖的版本管理，在进行依赖时仅需关注 BoM 库版本即可。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">dependencies <span class="token punctuation">&#123;</span>    <span class="token comment">// 引入 BoM 库</span>    implementation <span class="token function">platform</span><span class="token punctuation">(</span><span class="token string">'androidx.compose:compose-bom:2022.12.00'</span><span class="token punctuation">)</span>    <span class="token comment">// 将 BoM 库中的该依赖版本替换为 1.1.0-alpha01</span>    implementation <span class="token string">'androidx.compose.material3:material3:1.1.0-alpha01'</span>    <span class="token comment">// 添加 BoM 库中包含的依赖</span>    implementation <span class="token string">'androidx.compose.foundation:foundation'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如需了解哪些 Compose 库版本已映射到特定 BoM 版本，请查看 <a href="https://developer.android.google.cn/jetpack/compose/setup#bom-version-mapping">BoM 到库的版本映射</a>。</p><h2 id="引入使用"><a href="#引入使用" class="headerlink" title="引入使用"></a>引入使用</h2><h3 id="1-androidx-activity-ComponentActivity"><a href="#1-androidx-activity-ComponentActivity" class="headerlink" title="1.androidx.activity.ComponentActivity"></a>1.androidx.activity.ComponentActivity</h3><p>通常情况下使用可选依赖的 compose Activity 中，ComponentActivity.setContent() 会做为 ComposeView 的入口</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// androidx.activity.compose.ComponentActivity.kt</span><span class="token keyword">public</span> <span class="token keyword">fun</span> ComponentActivity<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>    parent<span class="token operator">:</span> CompositionContext<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    content<span class="token operator">:</span> <span class="token annotation builtin">@Composable</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token comment">// MainActivity.kt</span><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> androidx<span class="token punctuation">.</span>activity<span class="token punctuation">.</span><span class="token function">ComponentActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        setContent <span class="token punctuation">&#123;</span>            <span class="token comment">// 你的界面</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-ComposeView-做为-View"><a href="#2-ComposeView-做为-View" class="headerlink" title="2.ComposeView 做为 View"></a>2.ComposeView 做为 View</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// ComposeViewFragment.kt</span><span class="token keyword">class</span> ComposeViewFragment <span class="token operator">:</span> <span class="token function">Fragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreateView</span><span class="token punctuation">(</span>        inflater<span class="token operator">:</span> LayoutInflater<span class="token punctuation">,</span>        container<span class="token operator">:</span> ViewGroup<span class="token operator">?</span><span class="token punctuation">,</span>        savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span>    <span class="token punctuation">)</span><span class="token operator">:</span> View <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">ComposeView</span><span class="token punctuation">(</span><span class="token function">requireContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">&#123;</span>            setContent <span class="token punctuation">&#123;</span>                <span class="token comment">// 你的界面</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// XmlFragment.kt</span><span class="token keyword">class</span> XmlFragment <span class="token operator">:</span> <span class="token function">Fragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreateView</span><span class="token punctuation">(</span>        inflater<span class="token operator">:</span> LayoutInflater<span class="token punctuation">,</span>        container<span class="token operator">:</span> ViewGroup<span class="token operator">?</span><span class="token punctuation">,</span>        savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span>    <span class="token punctuation">)</span><span class="token operator">:</span> View <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> rootView <span class="token operator">=</span> LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout_fragment_xml<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> composeView <span class="token operator">=</span> rootView<span class="token punctuation">.</span>findViewById<span class="token operator">&lt;</span>ComposeView<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>compose_view<span class="token punctuation">)</span>        composeView<span class="token punctuation">.</span><span class="token function">setContent</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 你的界面</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> rootView    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这种方式在部分场景下会报 java.lang.IllegalStateException: ViewTreeLifecycleOwner not found from androidx.compose.ui.platform.ComposeView，比如 dialog.setContentView(ComposeView(Context))</p><p>使用过程中请注意。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>Jetpack Compose 在执行可组合项构建界面时被称之为组合，组合又分为<strong>初始组合</strong>和<strong>重组</strong>。</p><p><strong>初始组合</strong>：首次运行可组合项的组合。</p><p><strong>重组</strong>：因数据源发生变化而进行的组合。</p><p>默认情况下的 Jetpack Compose 仅会进行一次组合，因为此时的数据源对于它来说是常量，即便是在外部修改数据源也不会发生重组进行界面更新。</p><p>从而就需要引入 mutableStateOf 来修饰数据源告诉 Jetpack Compose 这是一个变化的数据，之后每当数据源变更时就会使得依赖该数据源的可组合项进行重组。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Composable</span><span class="token keyword">fun</span> <span class="token function">MyText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"哈哈哈"</span></span><span class="token punctuation">)</span>    <span class="token function">Text</span><span class="token punctuation">(</span>        text <span class="token operator">=</span> text<span class="token punctuation">,</span>        modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">clickable</span> <span class="token punctuation">&#123;</span>            text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"呵呵"</span></span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/ALightGroup/ALightGroup.github.io/alg-img/7be6fa6f-3272-4bcf-b10d-aa971950d969.gif"></p><p>不过这种方式还不能实现数据源更新界面也随之更新，这是因为进行重组的时候 text 仍会被 “哈哈哈” 所覆盖，还需要加上 remember API 将对象进行存储。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Composable</span><span class="token keyword">fun</span> <span class="token function">MyText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> text <span class="token operator">=</span> remember <span class="token punctuation">&#123;</span><span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"哈哈哈"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    <span class="token function">Text</span><span class="token punctuation">(</span>        text <span class="token operator">=</span> text<span class="token punctuation">,</span>        modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">clickable</span> <span class="token punctuation">&#123;</span>            text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"呵呵"</span></span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由 remember 修饰时里面的数据在进行重组的时候就不会被重新初始化，从而能够保证更新的数据能够正确展示到界面中。</p><p><img src="https://raw.githubusercontent.com/ALightGroup/ALightGroup.github.io/alg-img/c6cb991b-c833-45b5-81e5-5f0f9de837d0.gif"></p><h2 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h2><p>Compose 的基本组件可分为布局和控件，常用布局有：</p><ol><li>Box</li><li>Row &#x2F; Column</li><li>Constraintlayout (需要依赖 compose constraintlayout)</li><li>LazyRow &#x2F; LazyColumn</li></ol><p>常用控件有：</p><ol><li>Text</li><li>TextField</li><li>Image</li><li>Dialog</li></ol><h3 id="常用布局"><a href="#常用布局" class="headerlink" title="常用布局"></a>常用布局</h3><h4 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h4><p>可看做是 Compose 版的 FrameLayout</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// Box.kt</span><span class="token annotation builtin">@Composable</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">Box</span><span class="token punctuation">(</span>    modifier<span class="token operator">:</span> Modifier <span class="token operator">=</span> Modifier<span class="token punctuation">,</span>    contentAlignment<span class="token operator">:</span> Alignment <span class="token operator">=</span> Alignment<span class="token punctuation">.</span>TopStart<span class="token punctuation">,</span>    propagateMinConstraints<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    content<span class="token operator">:</span> <span class="token annotation builtin">@Composable</span> BoxScope<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token comment">// 使用</span>Box<span class="token punctuation">&#123;</span>    <span class="token comment">// 你的内容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>modifier：修饰符</p><p>contentAlignment：内容对齐方法，等价于 android:gravity</p><p>propagateMinConstraints：是否将传入的最小值约束传递给内容。</p><p>content：Box 中的内容</p><h4 id="Row-x2F-Column"><a href="#Row-x2F-Column" class="headerlink" title="Row &#x2F; Column"></a>Row &#x2F; Column</h4><p>两个可分别看做 LinearLayout 的水平排列和垂直排列</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// Row.kt</span><span class="token annotation builtin">@Composable</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">Row</span><span class="token punctuation">(</span>    modifier<span class="token operator">:</span> Modifier <span class="token operator">=</span> Modifier<span class="token punctuation">,</span>    horizontalArrangement<span class="token operator">:</span> Arrangement<span class="token punctuation">.</span>Horizontal <span class="token operator">=</span> Arrangement<span class="token punctuation">.</span>Start<span class="token punctuation">,</span>    verticalAlignment<span class="token operator">:</span> Alignment<span class="token punctuation">.</span>Vertical <span class="token operator">=</span> Alignment<span class="token punctuation">.</span>Top<span class="token punctuation">,</span>    content<span class="token operator">:</span> <span class="token annotation builtin">@Composable</span> RowScope<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token comment">// Column.kt</span><span class="token annotation builtin">@Composable</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">Column</span><span class="token punctuation">(</span>    modifier<span class="token operator">:</span> Modifier <span class="token operator">=</span> Modifier<span class="token punctuation">,</span>    verticalArrangement<span class="token operator">:</span> Arrangement<span class="token punctuation">.</span>Vertical <span class="token operator">=</span> Arrangement<span class="token punctuation">.</span>Top<span class="token punctuation">,</span>    horizontalAlignment<span class="token operator">:</span> Alignment<span class="token punctuation">.</span>Horizontal <span class="token operator">=</span> Alignment<span class="token punctuation">.</span>Start<span class="token punctuation">,</span>    content<span class="token operator">:</span> <span class="token annotation builtin">@Composable</span> ColumnScope<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token comment">// 使用</span>Row<span class="token punctuation">&#123;</span>    <span class="token comment">// 你的内容</span><span class="token punctuation">&#125;</span>Column<span class="token punctuation">&#123;</span>    <span class="token comment">// 你的内容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>modifier：修饰符</p><p>horizontalArrangement&#x2F;verticalArrangement：水平&#x2F;垂直排列方式</p><p>verticalAlignment&#x2F;horizontalAlignment：内容垂直&#x2F;水平对齐方式，等价于垂直&#x2F;水平方向上的 android:gravity</p><p>content：内容</p><h4 id="Constraintlayout"><a href="#Constraintlayout" class="headerlink" title="Constraintlayout"></a>Constraintlayout</h4><p>Compose 版的约束布局</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// Constraintlayout.kt</span><span class="token annotation builtin">@Composable</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">ConstraintLayout</span><span class="token punctuation">(</span>    modifier<span class="token operator">:</span> Modifier <span class="token operator">=</span> Modifier<span class="token punctuation">,</span>    optimizationLevel<span class="token operator">:</span> Int <span class="token operator">=</span> Optimizer<span class="token punctuation">.</span>OPTIMIZATION_STANDARD<span class="token punctuation">,</span>    <span class="token keyword">crossinline</span> content<span class="token operator">:</span> <span class="token annotation builtin">@Composable</span> ConstraintLayoutScope<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>modifier：修饰符</p><p>optimizationLevel：（作用未知）</p><p>content：内容</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 使用</span>ConstraintLayout <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>title<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">createRefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">""</span></span><span class="token punctuation">,</span>        modifier <span class="token operator">=</span> Modifier            <span class="token punctuation">.</span><span class="token function">constrainAs</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                top<span class="token punctuation">.</span><span class="token function">linkTo</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>top<span class="token punctuation">)</span>                start<span class="token punctuation">.</span><span class="token function">linkTo</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>start<span class="token punctuation">)</span>                end<span class="token punctuation">.</span><span class="token function">linkTo</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>end<span class="token punctuation">)</span>                <span class="token comment">// 在满足约束条件下宽/高尽可能的大</span>                width <span class="token operator">=</span> Dimension<span class="token punctuation">.</span>fillToConstraints                height <span class="token operator">=</span> Dimension<span class="token punctuation">.</span>fillToConstraints            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">""</span></span><span class="token punctuation">,</span>        modifier <span class="token operator">=</span> Modifier            <span class="token punctuation">.</span><span class="token function">constrainAs</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                top<span class="token punctuation">.</span><span class="token function">linkTo</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>bottom<span class="token punctuation">)</span>                start<span class="token punctuation">.</span><span class="token function">linkTo</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>start<span class="token punctuation">)</span>                end<span class="token punctuation">.</span><span class="token function">linkTo</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>end<span class="token punctuation">)</span>                <span class="token comment">// 在满足约束条件下宽/高尽可能的大</span>                width <span class="token operator">=</span> Dimension<span class="token punctuation">.</span>fillToConstraints                height <span class="token operator">=</span> Dimension<span class="token punctuation">.</span>fillToConstraints            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先调用 createRefs() 创建需要进行约束控件的引用，之后通过 Modifier.constrainAs() 将当前控件与引用进行绑定，之后在方法后面的 lambda 中采用类似 xml 中使用约束布局的方法进行约束。</p><blockquote><p><a href="https://developer.android.google.cn/jetpack/compose/layouts/constraintlayout?hl=zh-cn">Compose 中的 ConstraintLayout</a></p></blockquote><h4 id="LazyRow-x2F-LazyColumn"><a href="#LazyRow-x2F-LazyColumn" class="headerlink" title="LazyRow &#x2F; LazyColumn"></a>LazyRow &#x2F; LazyColumn</h4><p>两个可分别看做 RecyclerView 的水平排列和垂直排列</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// LazyDsl.kt</span><span class="token annotation builtin">@Composable</span><span class="token keyword">fun</span> <span class="token function">LazyRow</span><span class="token punctuation">(</span>    modifier<span class="token operator">:</span> Modifier <span class="token operator">=</span> Modifier<span class="token punctuation">,</span>    state<span class="token operator">:</span> LazyListState <span class="token operator">=</span> <span class="token function">rememberLazyListState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    contentPadding<span class="token operator">:</span> PaddingValues <span class="token operator">=</span> <span class="token function">PaddingValues</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span><span class="token punctuation">,</span>    reverseLayout<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    horizontalArrangement<span class="token operator">:</span> Arrangement<span class="token punctuation">.</span>Horizontal <span class="token operator">=</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reverseLayout<span class="token punctuation">)</span> Arrangement<span class="token punctuation">.</span>Start <span class="token keyword">else</span> Arrangement<span class="token punctuation">.</span>End<span class="token punctuation">,</span>    verticalAlignment<span class="token operator">:</span> Alignment<span class="token punctuation">.</span>Vertical <span class="token operator">=</span> Alignment<span class="token punctuation">.</span>Top<span class="token punctuation">,</span>    flingBehavior<span class="token operator">:</span> FlingBehavior <span class="token operator">=</span> ScrollableDefaults<span class="token punctuation">.</span><span class="token function">flingBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    userScrollEnabled<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    content<span class="token operator">:</span> LazyListScope<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token annotation builtin">@Composable</span><span class="token keyword">fun</span> <span class="token function">LazyColumn</span><span class="token punctuation">(</span>    modifier<span class="token operator">:</span> Modifier <span class="token operator">=</span> Modifier<span class="token punctuation">,</span>    state<span class="token operator">:</span> LazyListState <span class="token operator">=</span> <span class="token function">rememberLazyListState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    contentPadding<span class="token operator">:</span> PaddingValues <span class="token operator">=</span> <span class="token function">PaddingValues</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span><span class="token punctuation">,</span>    reverseLayout<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    verticalArrangement<span class="token operator">:</span> Arrangement<span class="token punctuation">.</span>Vertical <span class="token operator">=</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reverseLayout<span class="token punctuation">)</span> Arrangement<span class="token punctuation">.</span>Top <span class="token keyword">else</span> Arrangement<span class="token punctuation">.</span>Bottom<span class="token punctuation">,</span>    horizontalAlignment<span class="token operator">:</span> Alignment<span class="token punctuation">.</span>Horizontal <span class="token operator">=</span> Alignment<span class="token punctuation">.</span>Start<span class="token punctuation">,</span>    flingBehavior<span class="token operator">:</span> FlingBehavior <span class="token operator">=</span> ScrollableDefaults<span class="token punctuation">.</span><span class="token function">flingBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    userScrollEnabled<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    content<span class="token operator">:</span> LazyListScope<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>modifier：修饰符</p><p>state：用于控制或观察列表状态的对象</p><p>contentPadding：内边距</p><p>reverseLayout：是否反向排列列表</p><p>horizontalArrangement&#x2F;verticalArrangement：水平&#x2F;垂直排列方式</p><p>verticalAlignment&#x2F;horizontalAlignment：内容垂直&#x2F;水平对齐方式，等价于垂直&#x2F;水平方向上的 android:gravity</p><p>flingBehavior：惯性滑动行为</p><p>userScrollEnabled：是否允许进行触摸滑动</p><p>content：内容</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 使用</span>LazyRow <span class="token punctuation">&#123;</span>    item <span class="token punctuation">&#123;</span>        <span class="token comment">// item 1</span>    <span class="token punctuation">&#125;</span>    item <span class="token punctuation">&#123;</span>        <span class="token comment">// item 2</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 添加一组 item</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">&#123;</span>        item <span class="token punctuation">&#123;</span>            <span class="token comment">// listItem</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 添加一组 item 的另一种方法</span>    <span class="token function">items</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">data</span> <span class="token operator">-></span>        <span class="token comment">// listItem</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>LazyColumn <span class="token punctuation">&#123;</span>    item <span class="token punctuation">&#123;</span>        <span class="token comment">// item 1</span>    <span class="token punctuation">&#125;</span>    item <span class="token punctuation">&#123;</span>        <span class="token comment">// item 2</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 添加一组 item</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">&#123;</span>        item <span class="token punctuation">&#123;</span>            <span class="token comment">// listItem</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 添加一组 item 的另一种方法</span>    <span class="token function">items</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">data</span> <span class="token operator">-></span>        <span class="token comment">// listItem</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.android.google.cn/jetpack/compose/lists?hl=zh-cn#lazy">延迟列表</a> </p></blockquote><h3 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h3><h4 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h4><p>文本框</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// Text.kt</span><span class="token annotation builtin">@Composable</span><span class="token keyword">fun</span> <span class="token function">Text</span><span class="token punctuation">(</span>    text<span class="token operator">:</span> String<span class="token punctuation">,</span>    modifier<span class="token operator">:</span> Modifier <span class="token operator">=</span> Modifier<span class="token punctuation">,</span>    color<span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Unspecified<span class="token punctuation">,</span>    fontSize<span class="token operator">:</span> TextUnit <span class="token operator">=</span> TextUnit<span class="token punctuation">.</span>Unspecified<span class="token punctuation">,</span>    fontStyle<span class="token operator">:</span> FontStyle<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    fontWeight<span class="token operator">:</span> FontWeight<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    fontFamily<span class="token operator">:</span> FontFamily<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    letterSpacing<span class="token operator">:</span> TextUnit <span class="token operator">=</span> TextUnit<span class="token punctuation">.</span>Unspecified<span class="token punctuation">,</span>    textDecoration<span class="token operator">:</span> TextDecoration<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    textAlign<span class="token operator">:</span> TextAlign<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    lineHeight<span class="token operator">:</span> TextUnit <span class="token operator">=</span> TextUnit<span class="token punctuation">.</span>Unspecified<span class="token punctuation">,</span>    overflow<span class="token operator">:</span> TextOverflow <span class="token operator">=</span> TextOverflow<span class="token punctuation">.</span>Clip<span class="token punctuation">,</span>    softWrap<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    maxLines<span class="token operator">:</span> Int <span class="token operator">=</span> Int<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>    inlineContent<span class="token operator">:</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> InlineTextContent<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    onTextLayout<span class="token operator">:</span> <span class="token punctuation">(</span>TextLayoutResult<span class="token punctuation">)</span> <span class="token operator">-></span> Unit <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    style<span class="token operator">:</span> TextStyle <span class="token operator">=</span> LocalTextStyle<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>text：文本内容</p><p>modifier：修饰符</p><p>color：文本颜色</p><p>fontSize：字体大小</p><p>fontStyle：字体风格，有正常和斜体</p><p>fontWeight：字重，范围 1 到 1000</p><p>fontFamily：字体</p><p>letterSpacing：字宽</p><p>textDecoration：文字上的装饰，例如删除线、下划线</p><p>textAlign：文字内容对齐方法</p><p>lineHeight：行高</p><p>overflow：与 softWrap 配置文本换行行为</p><p>softWrap：与 overflow 配置文本换行行为</p><p>maxLines：最大行数</p><p>inlineContent：用于在文本布局中插入可组合元素</p><p>onTextLayout：在 compose 进行布局时可通过回调提供的 TextLayoutResult 对象来对文本显示进行修改</p><p>style：文本风格，优先生效上面的配置信息</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 使用</span><span class="token comment">// 普通文本</span><span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"你的内容"</span></span><span class="token punctuation">)</span><span class="token comment">// 资源字符串</span><span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token function">stringResource</span><span class="token punctuation">(</span>id <span class="token operator">=</span> R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.android.google.cn/jetpack/compose/text?hl=zh-cn#displaying-text">Compose 中的文字</a> </p></blockquote><h4 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h4><p>输入框</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// TextField.kt</span><span class="token annotation builtin">@Composable</span><span class="token keyword">fun</span> <span class="token function">TextField</span><span class="token punctuation">(</span>    value<span class="token operator">:</span> String<span class="token punctuation">,</span>    onValueChange<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">,</span>    modifier<span class="token operator">:</span> Modifier <span class="token operator">=</span> Modifier<span class="token punctuation">,</span>    enabled<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    readOnly<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    textStyle<span class="token operator">:</span> TextStyle <span class="token operator">=</span> LocalTextStyle<span class="token punctuation">.</span>current<span class="token punctuation">,</span>    label<span class="token operator">:</span> <span class="token annotation builtin">@Composable</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    placeholder<span class="token operator">:</span> <span class="token annotation builtin">@Composable</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    leadingIcon<span class="token operator">:</span> <span class="token annotation builtin">@Composable</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    trailingIcon<span class="token operator">:</span> <span class="token annotation builtin">@Composable</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    isError<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    visualTransformation<span class="token operator">:</span> VisualTransformation <span class="token operator">=</span> VisualTransformation<span class="token punctuation">.</span>None<span class="token punctuation">,</span>    keyboardOptions<span class="token operator">:</span> KeyboardOptions <span class="token operator">=</span> KeyboardOptions<span class="token punctuation">.</span>Default<span class="token punctuation">,</span>    keyboardActions<span class="token operator">:</span> KeyboardActions <span class="token operator">=</span> <span class="token function">KeyboardActions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    singleLine<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    maxLines<span class="token operator">:</span> Int <span class="token operator">=</span> Int<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>    interactionSource<span class="token operator">:</span> MutableInteractionSource <span class="token operator">=</span> remember <span class="token punctuation">&#123;</span> <span class="token function">MutableInteractionSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    shape<span class="token operator">:</span> Shape <span class="token operator">=</span>        MaterialTheme<span class="token punctuation">.</span>shapes<span class="token punctuation">.</span>small<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>bottomEnd <span class="token operator">=</span> ZeroCornerSize<span class="token punctuation">,</span> bottomStart <span class="token operator">=</span> ZeroCornerSize<span class="token punctuation">)</span><span class="token punctuation">,</span>    colors<span class="token operator">:</span> TextFieldColors <span class="token operator">=</span> TextFieldDefaults<span class="token punctuation">.</span><span class="token function">textFieldColors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>value： 输入框中的初始文本</p><p>onValueChange：输入过程中文本变更时的回调</p><p>modifier：修饰符</p><p>enabled：是否可以获取焦点</p><p>readOnly：输入框是否为不可编辑，与 enabled 的区别是即使为不可编辑仍然可以进行选择文字复制。</p><p>textStyle：文本风格</p><p>label：显示在文本字段内的可选标签，未获得焦点时呈现</p><p>placeholder：获得焦点时的默认呈现类似Tint的效果</p><p>leadingIcon：输入框前部的图标</p><p>trailingIcon：输入框后部的图标</p><p>isError：输入内容是否错误，如果为 true，则 label，Icon 等会相应的展示错误的显示状态</p><p>visualTransformation：内容显示转变，例如输入密码时可以变成特定效果</p><p>keyboardOptions：软键盘类型</p><p>keyboardActions：等价于 android:imeAction</p><p>singleLine：是否单行</p><p>maxLines：输入框最大行数，如果 singleLine 设置为 true，这个参数将被忽略</p><p>interactionSource：与输入框的交互行为</p><p>shape：输入框的形状</p><p>colors：文本、内容(包括标签、占位符、前面和后面的图标)和背景在不同状态下的颜色，类似 Android 的 ColorStateList</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 使用</span><span class="token function">TextField</span><span class="token punctuation">(</span>    value <span class="token operator">=</span> content<span class="token punctuation">,</span>     onValueChange <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    shape <span class="token operator">=</span> <span class="token function">RoundedCornerShape</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span><span class="token punctuation">,</span>    colors <span class="token operator">=</span> TextFieldDefaults<span class="token punctuation">.</span><span class="token function">textFieldColors</span><span class="token punctuation">(</span>        backgroundColor <span class="token operator">=</span> <span class="token function">Color</span><span class="token punctuation">(</span>LocalContext<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>gray_F8F8FA<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        disabledIndicatorColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>Transparent<span class="token punctuation">,</span>        unfocusedIndicatorColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>Transparent<span class="token punctuation">,</span>        focusedIndicatorColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>Transparent<span class="token punctuation">,</span>        errorIndicatorColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>Transparent    <span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.android.google.cn/jetpack/compose/text?hl=zh-cn#enter-modify-text">输入和修改文字</a> </p></blockquote><h4 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h4><p>图片控件</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// Image.kt</span><span class="token annotation builtin">@Composable</span><span class="token keyword">fun</span> <span class="token function">Image</span><span class="token punctuation">(</span>    painter<span class="token operator">:</span> Painter<span class="token punctuation">,</span>    contentDescription<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>    modifier<span class="token operator">:</span> Modifier <span class="token operator">=</span> Modifier<span class="token punctuation">,</span>    alignment<span class="token operator">:</span> Alignment <span class="token operator">=</span> Alignment<span class="token punctuation">.</span>Center<span class="token punctuation">,</span>    contentScale<span class="token operator">:</span> ContentScale <span class="token operator">=</span> ContentScale<span class="token punctuation">.</span>Fit<span class="token punctuation">,</span>    alpha<span class="token operator">:</span> Float <span class="token operator">=</span> DefaultAlpha<span class="token punctuation">,</span>    colorFilter<span class="token operator">:</span> ColorFilter<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>painter：绘制的图片，通常为 <a href="https://developer.android.google.cn/jetpack/compose/graphics/images/compare?hl=zh-cn">ImageBitmap 与 ImageVector</a></p><p>contentDescription：图片内容描述，用于 Android 辅助功能</p><p>modifier：修饰符</p><p>alignment：图片对齐方式</p><p>contentScale：图片缩放方式</p><p>alpha：图片透明度</p><p>colorFilter：可通过该参数对图片进行着色</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 使用</span><span class="token comment">// 仅支持 jpg、svg、png 等常规图片</span><span class="token function">Image</span><span class="token punctuation">(</span>    painter <span class="token operator">=</span> <span class="token function">painterResource</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>logo<span class="token punctuation">)</span><span class="token punctuation">,</span>    contentDescription <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">// 需要支持 shape 的 drawable 场景</span><span class="token keyword">val</span> drawable <span class="token operator">=</span> AppCompatResources<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token function">Image</span><span class="token punctuation">(</span>    painter <span class="token operator">=</span> <span class="token function">rememberDrawablePainter</span><span class="token punctuation">(</span>drawable <span class="token operator">=</span> drawable<span class="token punctuation">)</span><span class="token punctuation">,</span>    contentDescription <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.android.google.cn/jetpack/compose/graphics/images/loading?hl=zh-cn">加载图片</a>  </p></blockquote><h4 id="Dialog"><a href="#Dialog" class="headerlink" title="Dialog"></a>Dialog</h4><p>对话框</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// Dialog.kt</span><span class="token annotation builtin">@Composable</span><span class="token keyword">fun</span> <span class="token function">Dialog</span><span class="token punctuation">(</span>    onDismissRequest<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">,</span>    properties<span class="token operator">:</span> DialogProperties <span class="token operator">=</span> <span class="token function">DialogProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    content<span class="token operator">:</span> <span class="token annotation builtin">@Composable</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>onDismissRequest：需要退出对话框的回调，用于执行退出对话框</p><p>properties：定制对话框的交互行为</p><p>content：内容</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 使用</span><span class="token keyword">val</span> isShow <span class="token operator">=</span> remember <span class="token punctuation">&#123;</span><span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">Dialog</span><span class="token punctuation">(</span>onDismissRequest <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    isShow<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 你的内容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>修饰符可用来执行以下操作：</p><ul><li>设定控件的大小、布局、行为和外观等</li><li>添加高级互动，如使元素可点击、可滚动、可拖动或可缩放</li></ul><p>下面列出几个常用的方法：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">Modifier    <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment">// 控件宽度</span>    <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment">// 控件高度</span>    <span class="token punctuation">.</span><span class="token function">fillMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 宽高按照一定比例填充父布局 (0~1，默认填满)</span>    <span class="token punctuation">.</span><span class="token function">fillMaxWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment">// 宽按照一定比例填充父布局 (0~1，默认填满)</span>    <span class="token punctuation">.</span><span class="token function">fillMaxHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment">// 高按照一定比例填充父布局 (0~1，默认填满)</span>    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 控件边距</span>    <span class="token punctuation">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment">// 控件边框</span>    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment">// 控件背景</span>    <span class="token punctuation">.</span><span class="token function">clickable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment">// 添加点击事件</span>    <span class="token punctuation">.</span><span class="token function">constrainAs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 约束布局中设定约束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是修饰符调用过程中顺序不同产生的影响不同，例如：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Composable</span><span class="token keyword">fun</span> <span class="token function">MyModifier1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">Row</span><span class="token punctuation">(</span>        horizontalArrangement <span class="token operator">=</span> Arrangement<span class="token punctuation">.</span>SpaceAround<span class="token punctuation">,</span>        verticalAlignment <span class="token operator">=</span> Alignment<span class="token punctuation">.</span>CenterVertically<span class="token punctuation">,</span>        modifier <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">fillMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">Box</span><span class="token punctuation">(</span>            modifier <span class="token operator">=</span> Modifier                <span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                    color <span class="token operator">=</span> MaterialTheme<span class="token punctuation">.</span>colorScheme<span class="token punctuation">.</span>primary<span class="token punctuation">,</span>                    shape <span class="token operator">=</span> MaterialTheme<span class="token punctuation">.</span>shapes<span class="token punctuation">.</span>medium                <span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">clickable</span> <span class="token punctuation">&#123;</span>                 <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span>        <span class="token punctuation">)</span>         <span class="token function">Box</span><span class="token punctuation">(</span>            modifier <span class="token operator">=</span> Modifier                <span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                    color <span class="token operator">=</span> MaterialTheme<span class="token punctuation">.</span>colorScheme<span class="token punctuation">.</span>primary<span class="token punctuation">,</span>                    shape <span class="token operator">=</span> MaterialTheme<span class="token punctuation">.</span>shapes<span class="token punctuation">.</span>medium                <span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">.</span>dp<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">clickable</span> <span class="token punctuation">&#123;</span>                 <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/ALightGroup/ALightGroup.github.io/alg-img/29ae3dc8-de25-4e67-a741-f323b713c1d4.gif"></p><h2 id="与其他-Jetpack-组件联动"><a href="#与其他-Jetpack-组件联动" class="headerlink" title="与其他 Jetpack 组件联动"></a>与其他 Jetpack 组件联动</h2><h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><p>使用时需要依赖</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token interpolation-string"><span class="token string">"androidx.lifecycle:lifecycle-viewmodel-compose"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在代码中引用</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MyViewModel <span class="token operator">:</span> <span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*...*/</span> <span class="token punctuation">&#125;</span><span class="token comment">// 方式 1</span><span class="token annotation builtin">@Composable</span><span class="token keyword">fun</span> <span class="token function">MyScreen</span><span class="token punctuation">(</span>    viewModel<span class="token operator">:</span> MyViewModel <span class="token operator">=</span> <span class="token function">viewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该 ViewModel 实例的生命周期跟随控件所依赖的 Activity 或者 Fragment 变化。</p><h3 id="LiveData"><a href="#LiveData" class="headerlink" title="LiveData"></a>LiveData</h3><p>使用时需要依赖</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token interpolation-string"><span class="token string">"androidx.compose.runtime:runtime-livedata"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在代码中引用</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> liveDataState <span class="token operator">:</span> State<span class="token operator">&lt;</span>Any<span class="token operator">></span> <span class="token operator">=</span> viewModel<span class="token punctuation">.</span>liveData<span class="token punctuation">.</span><span class="token function">observeAsState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>liveDataState<span class="token punctuation">.</span>data <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// show error</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// show UI</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这种方式引用每当 LiveData 持有的数据实例变化时就会发起一次重组，从而实现界面的实时更新。</p><h3 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h3><p>使用 compose 的方式进行导航跳转</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> ROUTE1 <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"Route1"</span></span><span class="token keyword">val</span> ROUTE2 <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"Route2"</span></span><span class="token keyword">val</span> ROUTE3 <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"Route3"</span></span><span class="token keyword">val</span> navController <span class="token operator">=</span> <span class="token function">rememberNavController</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">NavHost</span><span class="token punctuation">(</span>        modifier <span class="token operator">=</span> Modifier<span class="token punctuation">,</span>        navController <span class="token operator">=</span> navController<span class="token punctuation">,</span>        startDestination <span class="token operator">=</span> ROUTE1    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">composable</span><span class="token punctuation">(</span>ROUTE1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">Route1UI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token function">composable</span><span class="token punctuation">(</span>ROUTE2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">Route2UI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token function">composable</span><span class="token punctuation">(</span>ROUTE3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">Route3UI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 调用以下方法进行跳转</span>    <span class="token comment">// navController.navigate(ROUTE1)</span>    <span class="token comment">// navController.navigate(ROUTE2)</span>    <span class="token comment">// navController.navigate(ROUTE3)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是跳转的页面大小取决于 NavHost 所依赖父布局的大小。</p>]]></content>
      
      
      <categories>
          
          <category> Compose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Compose </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Version Catalog(中央依赖声明，即：版本目录)</title>
      <link href="/2022/12/28/gradle/Version%20Catalog/"/>
      <url>/2022/12/28/gradle/Version%20Catalog/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是版本目录"><a href="#什么是版本目录" class="headerlink" title="什么是版本目录"></a>什么是版本目录</h2><h3 id="1-版本目录简介"><a href="#1-版本目录简介" class="headerlink" title="1.版本目录简介"></a>1.版本目录简介</h3><p><code>Central declaration of dependencies</code> （中央依赖声明，即：版本目录）是AGP7提供的一个新特性，用于管理项目中的依赖项列表，将依赖项表示为依赖声明，随后使用者可以直接在 <code>build.gradle</code> 构建脚本使用依赖列表中的依赖声明，而不再直接使用字符串显示依赖的方式依赖。如下所示：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">app<span class="token operator">:</span>build<span class="token punctuation">.</span>gradledependencies <span class="token punctuation">&#123;</span><span class="token comment">// 使用implementation(libs.kotlin.core)替代implementation "androidx.core:core-ktx:1.7.0"</span>  <span class="token function">implementation</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span>coreKtx<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码代码块所示， <code>libs.coreKtx</code> 是Gradle为我们自己定义的依赖目录自动生成的 <code>访问器</code>，通过它我们可以直接访问到我们定义的真正的依赖 <code>&quot;androidx.core:core-ktx:1.7.0&quot;</code> 而<code>coreKtx</code> 和 <code>&quot;androidx.core:core-ktx:1.7.0&quot;</code> 则称之为一组 <code>依赖目录</code></p><p>在版本目录中， <code>libs</code> 为默认推荐的分组别名（也可以自定义分组别名），分组内可以声明任意多个依赖目录，<code>coreKtx</code> 则为我们自己为具体依赖项（”androidx.core:core-ktx:1.7.0”）声明的依赖别名。</p><span id="more"></span><h3 id="2-版本目录的优势"><a href="#2-版本目录的优势" class="headerlink" title="2.版本目录的优势"></a>2.版本目录的优势</h3><ul><li>Gradle会为每个依赖目录生成一个类型安全的访问器，如：<code>libs.coreKtx</code></li><li>每个依赖目录对构建项目都是可见的，确保依赖项的版本适用于每个子项目或模块</li><li>依赖项可以声明为单个依赖目录，还可以将多个依赖项声明为 <code>依赖目录组</code></li><li>依赖目录中的依赖项，可以将 <code>groudId:artifactId</code> 与 <code>version</code> 分开，将 <code>version</code> 单独声明并在依赖项中引用</li></ul><h2 id="在工程中使用版本目录"><a href="#在工程中使用版本目录" class="headerlink" title="在工程中使用版本目录"></a>在工程中使用版本目录</h2><p>上面提到了使用 <code>libs.coreKtx</code> 替代 <code>&quot;androidx.core:core-ktx:1.7.0&quot;</code>，那我们应该如何声明<code>libs.coreKtx</code> ?</p><p>gradle中提供了两种构建版本目录的方式：</p><ul><li>使用settings api构建版本目录</li><li>使用TOML文件格式构建版本目录</li></ul><p><strong>使用之前</strong></p><p>当前Version Catalog为预览版本，并非正式版，使用之前需要在 <code>settings.gradle</code> 中单独开启功能特性</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">settings<span class="token punctuation">.</span>gradlepluginManagement <span class="token punctuation">&#123;</span> <span class="token punctuation">...</span><span class="token punctuation">&#125;</span><span class="token comment">// VERSION_CATALOGS当前并不是稳定版本功能</span><span class="token comment">// 所以需要预先开启功能预览 enableFeaturePreview('FEATURE')</span><span class="token function">enableFeaturePreview</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"VERSION_CATALOGS"</span></span><span class="token punctuation">)</span>dependencyResolutionManagement <span class="token punctuation">&#123;</span><span class="token punctuation">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-settings-api"><a href="#使用-settings-api" class="headerlink" title="使用 settings api"></a>使用 settings api</h3><p>直接在项目<code>settings.gradle</code> 文件中声明依赖目录</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">settings<span class="token punctuation">.</span>gradledependencyResolutionManagement <span class="token punctuation">&#123;</span>    <span class="token punctuation">......</span>    <span class="token comment">// 编写版本目录的依赖库</span>    versionCatalogs <span class="token punctuation">&#123;</span>        libs <span class="token punctuation">&#123;</span>            <span class="token comment">// 分别声明依赖别名('coreKtx')，groupId('androidx.core')，artifactId('core-ktx')以及版本('1.7.0')</span>            <span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">'coreKtx'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">'androidx.core'</span><span class="token punctuation">,</span> <span class="token string">'core-ktx'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">'1.7.0'</span><span class="token punctuation">)</span>            <span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">'appcompat'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">'androidx.appcompat'</span><span class="token punctuation">,</span> <span class="token string">'appcompat'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">'1.3.0'</span><span class="token punctuation">)</span>            <span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">'material'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">'com.google.android.material'</span><span class="token punctuation">,</span> <span class="token string">'material'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">'1.4.0'</span><span class="token punctuation">)</span>            <span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">'constraintlayout'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">'androidx.constraintlayout'</span><span class="token punctuation">,</span> <span class="token string">'constraintlayout'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">'2.0.4'</span><span class="token punctuation">)</span>            <span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">'junit-junit'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">'junit'</span><span class="token punctuation">,</span> <span class="token string">'junit'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">'4.13.2'</span><span class="token punctuation">)</span>            <span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">'junit-ext'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">'androidx.test.ext'</span><span class="token punctuation">,</span> <span class="token string">'junit'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">'1.1.3'</span><span class="token punctuation">)</span>            <span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">'junit-espresso'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">'androidx.test.espresso'</span><span class="token punctuation">,</span> <span class="token string">'espresso-core'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">'3.4.0'</span><span class="token punctuation">)</span>                            <span class="token comment">// 针对对个相同版本号的依赖，我们可以定一个通用版本号，即将依赖与版本单独声明并引用</span>            <span class="token function">version</span><span class="token punctuation">(</span><span class="token string">'lifecycle'</span><span class="token punctuation">,</span> <span class="token string">'2.2.0'</span><span class="token punctuation">)</span>            <span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">'lifecycleExtensions'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">'androidx.lifecycle'</span><span class="token punctuation">,</span> <span class="token string">'lifecycle-extensions'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">versionRef</span><span class="token punctuation">(</span><span class="token string">'lifecycle'</span><span class="token punctuation">)</span>            <span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">'lifecycleRuntime'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">'androidx.lifecycle'</span><span class="token punctuation">,</span> <span class="token string">'lifecycle-runtime-ktx'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">versionRef</span><span class="token punctuation">(</span><span class="token string">'lifecycle'</span><span class="token punctuation">)</span><span class="token comment">// 除了单个依赖声明，我们也可以将多个依赖项声明为一个依赖组</span>            <span class="token function">bundle</span><span class="token punctuation">(</span><span class="token string">'appBaseLib'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'coreKtx'</span><span class="token punctuation">,</span> <span class="token string">'appcompat'</span><span class="token punctuation">,</span> <span class="token string">'material'</span><span class="token punctuation">,</span> <span class="token string">'constraintlayout'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment">// 声明一个插件</span>             <span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">'kotlin-kapt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPluginId</span><span class="token punctuation">(</span><span class="token string">'org.jetbrains.kotlin.kapt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"1.7.0"</span></span><span class="token punctuation">)</span>             <span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">'kotlin-parcelize'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPluginId</span><span class="token punctuation">(</span><span class="token string">'org.jetbrains.kotlin.plugin.parcelize'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"1.7.0"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随即在app <code>build.gradle</code> 中使用版本目录</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">plugins <span class="token punctuation">&#123;</span><span class="token punctuation">......</span>    <span class="token comment">// 使用版本目录中声明的插件</span>    alias libs<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>kotlin<span class="token punctuation">.</span>kapt    alias libs<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>kotlin<span class="token punctuation">.</span>parcelize<span class="token punctuation">&#125;</span><span class="token punctuation">......</span>dependencies <span class="token punctuation">&#123;</span>    <span class="token comment">// 依赖单个制定的版本目录</span>    implementation libs<span class="token punctuation">.</span>coreKtx    implementation libs<span class="token punctuation">.</span>appcompat    implementation libs<span class="token punctuation">.</span>material    implementation libs<span class="token punctuation">.</span>constraintlayout    implementation libs<span class="token punctuation">.</span>lifecycleExtensions    implementation libs<span class="token punctuation">.</span>lifecycleRuntime    testImplementation libs<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>junit    androidTestImplementation libs<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>ext    androidTestImplementation libs<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>espresso    <span class="token comment">// 依赖版本目录组</span>    <span class="token comment">// implementation libs.bundles.appBaseLib</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-TOML-文件"><a href="#使用-TOML-文件" class="headerlink" title="使用 TOML 文件"></a>使用 TOML 文件</h3><p>除了在 <code>settings.gradle</code> 文件中直接声明依赖目录，官方更推荐使用 TOML 文件来声明依赖目录</p><p>首先在项目根目录下创建 <code>libs.versions.toml</code> 文件，并编写如下依赖内容：</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">versions</span><span class="token punctuation">]</span><span class="token key property">kotlin</span> <span class="token punctuation">=</span> <span class="token string">"1.7.0"</span><span class="token key property">appcompat</span> <span class="token punctuation">=</span> <span class="token string">"1.3.0"</span><span class="token key property">material</span> <span class="token punctuation">=</span> <span class="token string">"1.4.0"</span><span class="token key property">constraintlayout</span> <span class="token punctuation">=</span> <span class="token string">"2.0.4"</span><span class="token key property">lifecycle</span> <span class="token punctuation">=</span> <span class="token string">"2.2.0"</span><span class="token punctuation">[</span><span class="token table class-name">libraries</span><span class="token punctuation">]</span><span class="token key property">coreKtx</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">"androidx.core:core-ktx"</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">"kotlin"</span> <span class="token punctuation">&#125;</span><span class="token key property">appcompat</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">"androidx.appcompat:appcompat"</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">"appcompat"</span> <span class="token punctuation">&#125;</span><span class="token key property">material</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">"com.google.android.material:material"</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">"material"</span> <span class="token punctuation">&#125;</span><span class="token key property">constraintlayout</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">"androidx.constraintlayout:constraintlayout"</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">"constraintlayout"</span> <span class="token punctuation">&#125;</span><span class="token key property">lifecycleExtensions</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">"androidx.lifecycle:lifecycle-extensions"</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">"lifecycle"</span> <span class="token punctuation">&#125;</span><span class="token key property">lifecycleRuntime</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">"androidx.lifecycle:lifecycle-runtime-ktx"</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">"lifecycle"</span> <span class="token punctuation">&#125;</span><span class="token key property">junit-junit</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">"junit:junit"</span><span class="token punctuation">,</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"4.13.2"</span> <span class="token punctuation">&#125;</span><span class="token key property">junit_ext</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">"androidx.test.ext:junit"</span><span class="token punctuation">,</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"1.1.3"</span> <span class="token punctuation">&#125;</span><span class="token key property">junit_espresso</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">module</span> <span class="token punctuation">=</span> <span class="token string">"androidx.test.espresso:espresso-core"</span><span class="token punctuation">,</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"3.4.0"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token table class-name">bundles</span><span class="token punctuation">]</span><span class="token key property">appBaseLib</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"coreKtx"</span><span class="token punctuation">,</span> <span class="token string">"appcompat"</span><span class="token punctuation">,</span> <span class="token string">"material"</span><span class="token punctuation">,</span> <span class="token string">"constraintlayout"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token table class-name">plugins</span><span class="token punctuation">]</span><span class="token key property">kotlin-kapt</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">id</span> <span class="token punctuation">=</span> <span class="token string">"org.jetbrains.kotlin.kapt"</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">"kotlin"</span> <span class="token punctuation">&#125;</span><span class="token key property">kotlin-parcelize</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">id</span> <span class="token punctuation">=</span> <span class="token string">"org.jetbrains.kotlin.plugin.parcelize"</span><span class="token punctuation">,</span> <span class="token key property">version.ref</span> <span class="token punctuation">=</span> <span class="token string">"kotlin"</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随后在 setting.gradle 中引用该 TOML 文件</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml">settings<span class="token punctuation">.</span>gradledependencyResolutionManagement <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    // 第二种方式使用版本目录    libs <span class="token punctuation">&#123;</span>        from(files(<span class="token string">"./libs.versions.toml"</span>))    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在app <code>build.gradle</code> 中使用 TOML 文件中声明的依赖</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token punctuation">......</span>dependencies <span class="token punctuation">&#123;</span>    implementation libs<span class="token punctuation">.</span>bundles<span class="token punctuation">.</span>appBaseLib    implementation libs<span class="token punctuation">.</span>lifecycleExtensions    implementation libs<span class="token punctuation">.</span>lifecycleRuntime    testImplementation libs<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>junit    androidTestImplementation libs<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>ext    androidTestImplementation libs<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>espresso<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，我们再来详细看看 TOML 文件的一些细节。</p><p>TOML 文件由4个主要部分组成</p><p>[versions] 用于声明可以被依赖项引用的版本</p><p>[libraries] 用于声明依赖的别名</p><p>[bundles] 用于声明依赖包（依赖组）</p><p>[plugins] 用于声明插件</p><h3 id="依赖远程的-TOML-文件"><a href="#依赖远程的-TOML-文件" class="headerlink" title="依赖远程的 TOML 文件"></a>依赖远程的 TOML 文件</h3><p>我们也可以将我们本地编写好的 TOML 文件发布到 maven 上，然后通过远程依赖的方式将其依赖下来使用。编辑插件的 build.gradle 文件，并将其发布到本地maven</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">build<span class="token punctuation">.</span>gradleplugins <span class="token punctuation">&#123;</span>  <span class="token punctuation">......</span>  id <span class="token string">'version-catalog'</span>  id <span class="token string">'maven-publish'</span><span class="token punctuation">&#125;</span>catalog <span class="token punctuation">&#123;</span>    <span class="token comment">// declare the aliases, bundles and versions in this block</span>    versionCatalog <span class="token punctuation">&#123;</span>        from <span class="token function">files</span><span class="token punctuation">(</span><span class="token string">'../libs.versions.toml'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>publishing <span class="token punctuation">&#123;</span>    publications <span class="token punctuation">&#123;</span>        <span class="token function">maven</span><span class="token punctuation">(</span>MavenPublication<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            groupId <span class="token operator">=</span> <span class="token string">'com.alg.plugin.version'</span>            artifactId <span class="token operator">=</span> <span class="token string">'catalog'</span>            version <span class="token operator">=</span> <span class="token string">'0.0.1'</span>            from components<span class="token punctuation">.</span>versionCatalog        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 setting.gradle 中依赖远程的 TOML 文件</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">settings<span class="token punctuation">.</span>gradledependencyResolutionManagement <span class="token punctuation">&#123;</span>        <span class="token punctuation">......</span>    <span class="token comment">// 第三种方式使用版本目录</span>    libs <span class="token punctuation">&#123;</span>        <span class="token function">from</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"com.alg.plugin.version:catalog:0.0.1"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在app <code>build.gradle</code> 中使用 TOML 文件中声明的依赖</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token punctuation">......</span>dependencies <span class="token punctuation">&#123;</span>    implementation libs<span class="token punctuation">.</span>bundles<span class="token punctuation">.</span>appBaseLib    implementation libs<span class="token punctuation">.</span>lifecycleExtensions    implementation libs<span class="token punctuation">.</span>lifecycleRuntime    testImplementation libs<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>junit    androidTestImplementation libs<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>ext    androidTestImplementation libs<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>espresso<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="版本依赖总结"><a href="#版本依赖总结" class="headerlink" title="版本依赖总结"></a>版本依赖总结</h2><h3 id="1-关于-Gradle-的具体版本"><a href="#1-关于-Gradle-的具体版本" class="headerlink" title="1.关于 Gradle 的具体版本"></a>1.关于 Gradle 的具体版本</h3><p>上述测试一开始使用的 <code>gradle-7.3.3-bin.zip</code> 版本，在声明和引用 plugin 时，一直会报错，提示如下：</p><pre class="line-numbers language-none"><code class="language-none">plugin request for plugin already on the classpath must not include a version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本来 Plugins 的声明在 7.2 以上就可以生效的，但是 7.3.3 任有问题。</p><p>建议使用使用 7.4.2 及以上版本方可解决插件不生效的问题</p><p>查看当前 gradle 版本</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;gradlew --version <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将当前版本升级到7.4.2</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;gradlew wrapper --gradle-version&#x3D;7.4.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-声明一个有效的别名"><a href="#2-声明一个有效的别名" class="headerlink" title="2.声明一个有效的别名"></a>2.声明一个有效的别名</h3><p>别名必须由一系列标识符组成，由破折号 ( -, 推荐)、下划线 ( _) 或点 ( .) 分隔    </p><p>groovy将会为别名自动转换为有效的访问器，且在转换过程中，会自动将别名中的<code>-</code>,<code>_</code>和<code>.</code>字符都转换为<code>.</code>，如：<code>groovy-core</code>, <code>groovy_json</code>, <code>groovy-nio</code> 将会被转换为 <code>groovy.core</code>,  <code>groovy.json</code>, <code>groovy.nio</code> ，它们均属于同一个 <code>groovy</code> 分组。</p><p>如果不希望生成子组访问器，则直接使用大写字母区分单词，而不使用<code>-</code>,<code>_</code>和<code>.</code>字符。</p><h3 id="3-版本目录的统一管理"><a href="#3-版本目录的统一管理" class="headerlink" title="3.版本目录的统一管理"></a>3.版本目录的统一管理</h3><p>TOML 文件可以声明多个，官方建议如果开始使用版本目录，则应该将所有的声明都统一在 TOML文件中，外界均通过版本目录来集成所需的依赖。而依赖需要变更时，则只需修改版目录中对应的条目即可。</p><h3 id="4-关于自动补全"><a href="#4-关于自动补全" class="headerlink" title="4.关于自动补全"></a>4.关于自动补全</h3><p>当前版本的Version Calalog因自身原因暂时无法自动代码补全，但是借助IDEA的插件我们可以实现自动代码补全，配置如下：</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">// 根目录的build.gradle</span>buildscript <span class="token punctuation">&#123;</span>    dependencies <span class="token punctuation">&#123;</span>        classpath <span class="token function">files</span><span class="token punctuation">(</span>libs<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span>superclass<span class="token punctuation">.</span>protectionDomain<span class="token punctuation">.</span>codeSource<span class="token punctuation">.</span>location<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-关于-Version-Catalog-的完整demo"><a href="#5-关于-Version-Catalog-的完整demo" class="headerlink" title="5.关于 Version Catalog 的完整demo"></a>5.关于 Version Catalog 的完整demo</h3><p>Version Catalog 版本目录声明仓库</p><p><a href="https://github.com/ALightGroup/VersionManager">ALG Version Manager</a></p><p>版本目录使用</p><p><a href="https://github.com/ALightGroup/MetaService">MetaService</a></p><p><a href="https://github.com/ALightGroup/MetaFrame">MetaFrame</a></p><hr><blockquote><p>引用</p><p><a href="https://docs.gradle.org/current/userguide/platforms.html">Gradle Sharing Versions</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> gradle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
